// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/hoard.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HoardClient is the client API for Hoard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HoardClient interface {
	GetHoards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Hoard_GetHoardsClient, error)
	GetHoard(ctx context.Context, in *Id, opts ...grpc.CallOption) (*HoardInfo, error)
	CreateHoard(ctx context.Context, in *HoardInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateHoard(ctx context.Context, in *HoardInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteHoard(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type hoardClient struct {
	cc grpc.ClientConnInterface
}

func NewHoardClient(cc grpc.ClientConnInterface) HoardClient {
	return &hoardClient{cc}
}

func (c *hoardClient) GetHoards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Hoard_GetHoardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hoard_ServiceDesc.Streams[0], "/move.Hoard/GetHoards", opts...)
	if err != nil {
		return nil, err
	}
	x := &hoardGetHoardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hoard_GetHoardsClient interface {
	Recv() (*HoardInfo, error)
	grpc.ClientStream
}

type hoardGetHoardsClient struct {
	grpc.ClientStream
}

func (x *hoardGetHoardsClient) Recv() (*HoardInfo, error) {
	m := new(HoardInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hoardClient) GetHoard(ctx context.Context, in *Id, opts ...grpc.CallOption) (*HoardInfo, error) {
	out := new(HoardInfo)
	err := c.cc.Invoke(ctx, "/move.Hoard/GetHoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoardClient) CreateHoard(ctx context.Context, in *HoardInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/move.Hoard/CreateHoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoardClient) UpdateHoard(ctx context.Context, in *HoardInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/move.Hoard/UpdateHoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoardClient) DeleteHoard(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/move.Hoard/DeleteHoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HoardServer is the server API for Hoard service.
// All implementations must embed UnimplementedHoardServer
// for forward compatibility
type HoardServer interface {
	GetHoards(*Empty, Hoard_GetHoardsServer) error
	GetHoard(context.Context, *Id) (*HoardInfo, error)
	CreateHoard(context.Context, *HoardInfo) (*Id, error)
	UpdateHoard(context.Context, *HoardInfo) (*Status, error)
	DeleteHoard(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedHoardServer()
}

// UnimplementedHoardServer must be embedded to have forward compatible implementations.
type UnimplementedHoardServer struct {
}

func (UnimplementedHoardServer) GetHoards(*Empty, Hoard_GetHoardsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHoards not implemented")
}
func (UnimplementedHoardServer) GetHoard(context.Context, *Id) (*HoardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoard not implemented")
}
func (UnimplementedHoardServer) CreateHoard(context.Context, *HoardInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHoard not implemented")
}
func (UnimplementedHoardServer) UpdateHoard(context.Context, *HoardInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHoard not implemented")
}
func (UnimplementedHoardServer) DeleteHoard(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHoard not implemented")
}
func (UnimplementedHoardServer) mustEmbedUnimplementedHoardServer() {}

// UnsafeHoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HoardServer will
// result in compilation errors.
type UnsafeHoardServer interface {
	mustEmbedUnimplementedHoardServer()
}

func RegisterHoardServer(s grpc.ServiceRegistrar, srv HoardServer) {
	s.RegisterService(&Hoard_ServiceDesc, srv)
}

func _Hoard_GetHoards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HoardServer).GetHoards(m, &hoardGetHoardsServer{stream})
}

type Hoard_GetHoardsServer interface {
	Send(*HoardInfo) error
	grpc.ServerStream
}

type hoardGetHoardsServer struct {
	grpc.ServerStream
}

func (x *hoardGetHoardsServer) Send(m *HoardInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Hoard_GetHoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).GetHoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/move.Hoard/GetHoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).GetHoard(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hoard_CreateHoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).CreateHoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/move.Hoard/CreateHoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).CreateHoard(ctx, req.(*HoardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hoard_UpdateHoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).UpdateHoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/move.Hoard/UpdateHoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).UpdateHoard(ctx, req.(*HoardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hoard_DeleteHoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoardServer).DeleteHoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/move.Hoard/DeleteHoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoardServer).DeleteHoard(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Hoard_ServiceDesc is the grpc.ServiceDesc for Hoard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hoard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "move.Hoard",
	HandlerType: (*HoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHoard",
			Handler:    _Hoard_GetHoard_Handler,
		},
		{
			MethodName: "CreateHoard",
			Handler:    _Hoard_CreateHoard_Handler,
		},
		{
			MethodName: "UpdateHoard",
			Handler:    _Hoard_UpdateHoard_Handler,
		},
		{
			MethodName: "DeleteHoard",
			Handler:    _Hoard_DeleteHoard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHoards",
			Handler:       _Hoard_GetHoards_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/hoard.proto",
}
